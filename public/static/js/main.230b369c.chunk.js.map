{"version":3,"sources":["Config.js","App.js","serviceWorker.js","index.js"],"names":["Config","env","url","loginApiUrl","loginId","loginPassword","name","protocol","parameter","empid","space","speaker","isCallbackFunction","callbackFunctionResponse","userno","Panel","Collapse","App","props","socket","state","loginToken","loginUser","socketUrl","defaultSocketUrl","isConnected","isUrlModalOpen","isLoginUserModalOpen","defaultLoginApiUrl","defaultLoginId","defaultLoginPassword","listenEventNameListString","currentEventName","currentEventResponse","viewListEvent","viewWebSocketRequestInfo","viewSdtSocketList","requestWebSocketProtocol","requestWebSocketCallbackEnable","requestWebSocketParamter","validRequestParamter","requestCallbackResponse","webSocektRequestList","isLoading","changeInput","bind","changeCheckbox","showModal","closeModal","showLoginUserModal","closeLoginUserModal","changeUrlInfo","connect","disconnect","connectSocket","initDefaultSocektEvent","onConnect","onDisconnect","resetData","copyClipboardByLoginInfo","addCustomEvent","requestWebSocket","requestSdtWebsocket","changeWebSocektRequestListToParameter","changeWebSocektRequestListToResponse","message","lineNumber","column","errorObject","displayErrorMessage","appErrorObject","stack","statck","console","info","JSON","stringify","process","window","onerror","this","handleGlobalError","event","inputName","setState","target","value","checked","urlInfo","copyString","id","copy","alert","axios","post","username","password","then","response","data","token","user","catch","error","io","on","onMessage","onEvent","emit","eventList","split","forEach","eventName","off","customEventResult","callbackFunction","err","res","arrayIndex","requestInfo","rootString","updateParameter","updateWebSocektRequestList","update","$set","updateResponse","init","socketUrlList","tip","spinning","title","visible","footer","onCancel","map","index","header","key","align","gutter","style","marginTop","span","fontWeight","type","onClick","orientation","textAlign","onChange","e","danger","display","color","placement","overlayStyle","whiteSpace","disabled","marginLeft","fontSize","paddingTop","displayDataTypes","collapsed","src","indentWidth","theme","width","placeholder","locale","colors","string","background","height","body","minHeight","container","outerBox","content","isError","updateJson","jsObject","marginBottom","size","onEdit","updated_src","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.230b369c.chunk.js","sourcesContent":["const Config = {};\n\n// url 목록(로컬, 개발, 운영)\nConfig.socketUrlList = [\n  {\n    env: '로컬',\n    url:\n      'http://localhost:9090?prj=sdtalk&appid=sdtadm&cid=1&token=1aec31172508a8',\n    loginApiUrl: 'http://localhost:9090/auth/sdtalk/sdtadm/1/emp/login',\n    loginId: 'csmaster1',\n    loginPassword: '1212'\n  },\n  {\n    env: '개발',\n    url:\n      'http://localhost:9091?prj=sdtalk&appid=sdtadm&cid=1&token=1aec31172508a8',\n    loginApiUrl: 'http://localhost:9091/auth/sdtalk/sdtadm/1/emp/login',\n    loginId: 'csmaster1',\n    loginPassword: '1212'\n  },\n  {\n    env: '운영',\n    url:\n      'http://localhost:9092?prj=sdtalk&appid=sdtadm&cid=1&token=1aec31172508a8',\n    loginApiUrl: 'http://localhost:9092/auth/sdtalk/sdtadm/1/emp/login',\n    loginId: 'csmaster1',\n    loginPassword: '1212'\n  }\n];\n\n// 기본 url(로컬)\nConfig.defaultSocketUrl =\n  'http://localhost:9090?prj=sdtalk&appid=sdtadm&cid=1&token=1aec31172508a8';\n\n// 기본 로그인 api url(로컬)\nConfig.defaultLoginApiUrl =\n  'http://localhost:9090/auth/sdtalk/sdtadm/1/emp/login';\n\n// 로그인 id 기본값\nConfig.defaultLoginId = 'csmaster1';\n\n// 로그인 password 기본값\nConfig.defaultLoginPassword = '1212';\n\n// 기본 listen event\nConfig.listenEventNameListString = 'payload,notimsg,reads,err,error';\n\n// message\n// reads-emp\n// join\n// payload\n// leave\n// token\n\n// 상담톡 요청 목록\nConfig.webSocektRequestList = [\n  {\n    name: 'join',\n    protocol: 'join',\n    parameter: { empid: 1, space: '66', speaker: 177 },\n    isCallbackFunction: true,\n    callbackFunctionResponse: null\n  },\n  {\n    name: 'token',\n    protocol: 'token',\n    parameter: { userno: 'csmaster1' },\n    isCallbackFunction: true,\n    callbackFunctionResponse: null\n  }\n];\n\nexport default Config;\n","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport './App.css';\nimport {\n  Button,\n  Row,\n  Col,\n  Input,\n  Tag,\n  Divider,\n  Checkbox,\n  Modal,\n  Tooltip,\n  Collapse,\n  Spin\n} from 'antd';\nimport ReactJson from 'react-json-view';\nimport Config from './Config';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport copy from 'copy-to-clipboard';\nimport update from 'immutability-helper';\n\nconst { Panel } = Collapse;\n\nclass App extends Component {\n  socket = null;\n\n  constructor(props) {\n    super(props);\n\n    /*\n      \n      연결 url : socketUrl\n      현재 상태 : isConnected\n      연결 url 모달 open : isUrlModalOpen\n      login api url : loginApiUrl\n      id / password : loginId, loginPassword\n      listen 이벤트 정보 : listenEventNameListString\n      현재 응답명 : currentEventName\n      현재 응답 정보 : currentEventResponse\n      list event 정보 영역 view : viewListEvent\n      protocol request 영역 view : viewWebSocketRequestInfo\n      상담톡 웹소켓 요청 목록 view : viewSdtSocketList\n      요청 protocol : requestWebSocketProtocol,\n      요청 callback 반영 여부 : requestWebSocketCallbackEnable\n      요청 파라미터 : requestWebSocketParamter,\n      요청 파리미터 valid 여부 : validRequestParamter\n      요청 callback 응답 : requestCallbackResponse\n      상담톡 요청 소켓 목록 : webSocektRequestList\n      로딩중 : isLoading\n\n    */\n\n    this.state = {\n      socket: null,\n      loginToken: '',\n      loginUser: null,\n      socketUrl: Config.defaultSocketUrl,\n      isConnected: false,\n      isUrlModalOpen: false,\n      isLoginUserModalOpen: false,\n      loginApiUrl: Config.defaultLoginApiUrl,\n      loginId: Config.defaultLoginId,\n      loginPassword: Config.defaultLoginPassword,\n      listenEventNameListString: Config.listenEventNameListString,\n      currentEventName: '',\n      currentEventResponse: null,\n      viewListEvent: true,\n      viewWebSocketRequestInfo: true,\n      viewSdtSocketList: true,\n      requestWebSocketProtocol: '',\n      requestWebSocketCallbackEnable: true,\n      requestWebSocketParamter: null,\n      validRequestParamter: true,\n      requestCallbackResponse: null,\n      webSocektRequestList: Config.webSocektRequestList,\n      isLoading: false\n    };\n\n    // 공통 input 변경\n    this.changeInput = this.changeInput.bind(this);\n\n    // 공통 체크 박스 변경\n    this.changeCheckbox = this.changeCheckbox.bind(this);\n\n    // 모달 open\n    this.showModal = this.showModal.bind(this);\n\n    // 모달 close\n    this.closeModal = this.closeModal.bind(this);\n\n    // 로그인 사용자 정보 모달 open\n    this.showLoginUserModal = this.showLoginUserModal.bind(this);\n\n    // 로그인 사용자 정보 모달 close\n    this.closeLoginUserModal = this.closeLoginUserModal.bind(this);\n\n    // socket url, id, password 변경\n    this.changeUrlInfo = this.changeUrlInfo.bind(this);\n\n    // [연결] 버튼 핸들러\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n\n    // socket connect\n    this.connectSocket = this.connectSocket.bind(this);\n\n    // socket 기본 이밴트 등록\n    this.initDefaultSocektEvent = this.initDefaultSocektEvent.bind(this);\n\n    // socket 기본 event\n    this.onConnect = this.onConnect.bind(this);\n    this.onDisconnect = this.onDisconnect.bind(this);\n\n    // state data reset\n    this.resetData = this.resetData.bind(this);\n\n    // 로그인 정보 클립보드 copy\n    this.copyClipboardByLoginInfo = this.copyClipboardByLoginInfo.bind(this);\n\n    // 커스텀 이벤트 등록\n    this.addCustomEvent = this.addCustomEvent.bind(this);\n\n    // 웹소켓 요청\n    this.requestWebSocket = this.requestWebSocket.bind(this);\n\n    // 웹소켓 요청(상담톡 개별)\n    this.requestSdtWebsocket = this.requestSdtWebsocket.bind(this);\n\n    // 상담톡 요청 파리미터 수정\n    this.changeWebSocektRequestListToParameter = this.changeWebSocektRequestListToParameter.bind(\n      this\n    );\n\n    // 상담톡 응답 수정\n    this.changeWebSocektRequestListToResponse = this.changeWebSocektRequestListToResponse.bind(\n      this\n    );\n  }\n\n  handleGlobalError(message, url, lineNumber, column, errorObject) {\n    if (errorObject && typeof errorObject === 'string') {\n      errorObject = {\n        message: errorObject\n      };\n    }\n    let displayErrorMessage = '';\n    displayErrorMessage = displayErrorMessage + 'url : ' + url + '\\n';\n    displayErrorMessage =\n      displayErrorMessage + 'lineNumber : ' + lineNumber + '\\n';\n    displayErrorMessage = displayErrorMessage + 'column : ' + column + '\\n';\n    displayErrorMessage =\n      displayErrorMessage +\n      'message : ' +\n      (errorObject && errorObject.message\n        ? errorObject.message\n        : 'NO MESSAGE') +\n      '\\n';\n    errorObject = errorObject || {};\n    errorObject.message = displayErrorMessage;\n    let appErrorObject = { message: errorObject.message };\n    if (errorObject.stack) {\n      appErrorObject.statck = errorObject.stack;\n    }\n    console.info('appErrorInfo : ' + JSON.stringify(appErrorObject));\n    return false;\n  }\n\n  init() {\n    console.info('process.env : ' + JSON.stringify(process.env));\n    window.onerror = this.handleGlobalError;\n  }\n\n  changeInput(event, inputName) {\n    this.setState({ [inputName]: event.target.value });\n  }\n\n  changeCheckbox(event, inputName) {\n    let checked = event.target.checked;\n    this.setState({ [inputName]: checked });\n  }\n\n  showModal() {\n    this.setState({ isUrlModalOpen: true });\n  }\n\n  closeModal() {\n    this.setState({ isUrlModalOpen: false });\n  }\n\n  showLoginUserModal() {\n    this.setState({ isLoginUserModalOpen: true });\n  }\n\n  closeLoginUserModal() {\n    this.setState({ isLoginUserModalOpen: false });\n  }\n\n  changeUrlInfo(urlInfo) {\n    this.setState({\n      socketUrl: urlInfo.url,\n      loginApiUrl: urlInfo.loginApiUrl,\n      loginId: urlInfo.loginId,\n      loginPassword: urlInfo.loginPassword,\n      isUrlModalOpen: false\n    });\n  }\n\n  resetData() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    this.socket = null;\n    this.setState({\n      loginToken: '',\n      loginUser: null,\n      socket: null,\n      isConnected: false,\n      isUrlModalOpen: false,\n      currentEventName: '',\n      currentEventResponse: null,\n      viewListEvent: true,\n      viewWebSocketRequestInfo: true,\n      viewSdtSocketList: true,\n      requestCallbackResponse: null,\n      webSocektRequestList: Config.webSocektRequestList\n    });\n  }\n\n  copyClipboardByLoginInfo() {\n    let { socket, loginUser, loginToken } = this.state;\n    // 소켓 id :\n    // 로그인 토큰 :\n    // 사용자 정보(JSON) :\n    let copyString =\n      '소켓 id : ' +\n      (socket ? socket.id : '') +\n      '\\n' +\n      '로그인 토큰 : ' +\n      loginToken +\n      '\\n' +\n      '사용자 정보(JSON) : ' +\n      JSON.stringify(loginUser);\n    copy(copyString);\n    alert('클립보드에 복사되었습니다');\n    this.closeLoginUserModal();\n  }\n\n  connect() {\n    this.resetData();\n    let { loginApiUrl, loginId, loginPassword } = this.state;\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    this.setState({ isLoading: true });\n    axios\n      .post(loginApiUrl, {\n        username: loginId,\n        password: loginPassword\n      })\n      .then((response) => {\n        let data = response.data;\n        let token = data.token;\n        let user = data.user;\n        this.setState({ loginUser: user, loginToken: token, isLoading: false });\n        this.connectSocket();\n      })\n      .catch((error) => {\n        this.setState({ isLoading: false });\n      });\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.resetData();\n    }\n  }\n\n  connectSocket() {\n    let { socketUrl } = this.state;\n    this.socket = io(socketUrl);\n    this.initDefaultSocektEvent();\n  }\n\n  initDefaultSocektEvent() {\n    // conenct, disconnect, message, event\n    this.socket.on('connect', this.onConnect);\n    this.socket.on('disconnect', this.onDisconnect);\n    this.socket.on('message', this.onMessage);\n    this.socket.on('event', this.onEvent);\n  }\n\n  onConnect() {\n    let { loginToken } = this.state;\n    let socket = this.socket;\n    this.setState({ socket: socket, isConnected: true });\n    this.socket.emit('login', {\n      token: loginToken\n    });\n  }\n\n  onDisconnect(event) {\n    this.socket = null;\n    this.resetData();\n  }\n\n  addCustomEvent() {\n    let { listenEventNameListString } = this.state;\n    let eventList = listenEventNameListString.split(',');\n    let socket = this.socket;\n    eventList.forEach((eventName) => {\n      socket.off(eventName);\n      socket.on(eventName, (customEventResult) => {\n        this.setState({\n          currentEventName: eventName,\n          currentEventResponse: customEventResult\n        });\n      });\n    });\n    alert('커스텀 이벤트가 등록되었습니다');\n  }\n\n  requestWebSocket() {\n    let {\n      requestWebSocketProtocol,\n      requestWebSocketParamter,\n      requestWebSocketCallbackEnable\n    } = this.state;\n    let callbackFunction = null;\n    if (requestWebSocketCallbackEnable) {\n      callbackFunction = (err, res) => {\n        this.setState({ requestCallbackResponse: res });\n      };\n    }\n    this.socket.emit(\n      requestWebSocketProtocol,\n      requestWebSocketParamter,\n      callbackFunction\n    );\n  }\n\n  requestSdtWebsocket(arrayIndex, requestInfo) {\n    let { protocol, parameter, isCallbackFunction } = requestInfo;\n    let callbackFunction = null;\n    if (isCallbackFunction) {\n      callbackFunction = (err, res) => {\n        if (typeof res === 'string') {\n          res = { rootString: res };\n        }\n        this.changeWebSocektRequestListToResponse(arrayIndex, res);\n      };\n    }\n    this.socket.emit(protocol, parameter, callbackFunction);\n  }\n\n  changeWebSocektRequestListToParameter(arrayIndex, updateParameter) {\n    let { webSocektRequestList } = this.state;\n    let updateWebSocektRequestList = update(webSocektRequestList, {\n      [arrayIndex]: {\n        parameter: { $set: updateParameter }\n      }\n    });\n    this.setState({ webSocektRequestList: updateWebSocektRequestList });\n  }\n\n  changeWebSocektRequestListToResponse(arrayIndex, updateResponse) {\n    let { webSocektRequestList } = this.state;\n    let updateWebSocektRequestList = update(webSocektRequestList, {\n      [arrayIndex]: {\n        callbackFunctionResponse: { $set: updateResponse }\n      }\n    });\n    this.setState({ webSocektRequestList: updateWebSocektRequestList });\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    let {\n      socket,\n      loginUser,\n      loginToken,\n      socketUrl,\n      isConnected,\n      isUrlModalOpen,\n      isLoginUserModalOpen,\n      loginApiUrl,\n      loginId,\n      loginPassword,\n      listenEventNameListString,\n      currentEventName,\n      currentEventResponse,\n      viewListEvent,\n      viewWebSocketRequestInfo,\n      viewSdtSocketList,\n      requestWebSocketProtocol,\n      requestWebSocketCallbackEnable,\n      requestWebSocketParamter,\n      validRequestParamter,\n      requestCallbackResponse,\n      webSocektRequestList,\n      isLoading\n    } = this.state;\n    let socketUrlList = Config.socketUrlList;\n    return (\n      <div>\n        <Spin tip=\"Loading...\" spinning={isLoading}>\n          <div>\n            {/* 연결 url 모달/ */}\n            <Modal\n              title=\"소켓 URL 및 계정선택\"\n              visible={isUrlModalOpen}\n              footer={null}\n              onCancel={() => this.closeModal()}\n            >\n              <Collapse>\n                {socketUrlList.map((urlInfo, index) => {\n                  return (\n                    <Panel header={urlInfo.env} key={index}>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          <span style={{ fontWeight: 'bold' }}>\"url\"</span> :{' '}\n                          {urlInfo.url}\n                        </Col>\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          <span style={{ fontWeight: 'bold' }}>\n                            \"로그인 api url\"\n                          </span>{' '}\n                          : {urlInfo.loginApiUrl}\n                        </Col>\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          <span style={{ fontWeight: 'bold' }}>\"id\"</span> :{' '}\n                          {urlInfo.loginId},{' '}\n                          <span style={{ fontWeight: 'bold' }}>\"password\"</span>{' '}\n                          : {urlInfo.loginPassword}\n                        </Col>\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          <Button\n                            type=\"primary\"\n                            onClick={() => this.changeUrlInfo(urlInfo)}\n                          >\n                            적용\n                          </Button>{' '}\n                        </Col>\n                      </Row>\n                    </Panel>\n                  );\n                })}\n              </Collapse>\n            </Modal>\n            {/* 로그인 사용자 정보 모달/ */}\n            <Modal\n              title=\"로그인 정보\"\n              visible={isLoginUserModalOpen}\n              footer={null}\n              onCancel={() => this.closeLoginUserModal()}\n            >\n              <p>\n                <span style={{ fontWeight: 'bold' }}>\"소켓 id\"</span> :{' '}\n                {socket ? socket.id : ''}\n              </p>\n              <p>\n                <span style={{ fontWeight: 'bold' }}>\"token\"</span> :{' '}\n                {loginToken}\n              </p>\n              <p>\n                <span style={{ fontWeight: 'bold' }}>\"사용자 정보 JSON\"</span>\n              </p>\n              <p>{JSON.stringify(loginUser)}</p>\n              <Button type=\"primary\" onClick={this.copyClipboardByLoginInfo}>\n                정보 복사\n              </Button>\n            </Modal>\n            {/* 연결정보 */}\n            <div>\n              <Divider\n                orientation=\"left\"\n                style={{\n                  fontWeight: 'bold'\n                }}\n              >\n                연결정보\n              </Divider>\n              <Row align=\"middle\" gutter={6}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  소켓 url\n                </Col>\n                <Col span={10}>\n                  <Input\n                    value={socketUrl}\n                    onChange={(e) => this.changeInput(e, 'socketUrl')}\n                  />\n                </Col>\n                <Col span={10}>\n                  {isConnected ? (\n                    <Button\n                      type=\"primary\"\n                      onClick={() => this.disconnect()}\n                      danger\n                    >\n                      연결끊기\n                    </Button>\n                  ) : (\n                    <Button type=\"primary\" onClick={() => this.connect()}>\n                      연결\n                    </Button>\n                  )}{' '}\n                  <Button type=\"primary\" onClick={() => this.showModal()}>\n                    URL 선택\n                  </Button>{' '}\n                  <Button\n                    type=\"primary\"\n                    onClick={() => this.showLoginUserModal()}\n                    style={{ display: loginUser ? '' : 'none' }}\n                  >\n                    사용자 정보\n                  </Button>{' '}\n                  {isConnected ? (\n                    <Tag color=\"#2db7f5\">현재 상태 connected</Tag>\n                  ) : (\n                    <Tag color=\"#f50\">현재 상태 disconnected</Tag>\n                  )}\n                </Col>\n              </Row>\n              <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  로그인 api url\n                </Col>\n                <Col span={10}>\n                  <Input\n                    value={loginApiUrl}\n                    onChange={(e) => this.changeInput(e, 'loginApiUrl')}\n                  />\n                </Col>\n              </Row>\n              <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                <Col span={2} style={{ textAlign: 'right' }}>\n                  로그인 ID\n                </Col>\n                <Col span={4}>\n                  <Input\n                    value={loginId}\n                    onChange={(e) => this.changeInput(e, 'loginId')}\n                  />\n                </Col>\n                <Col span={2} style={{ textAlign: 'right' }}>\n                  암호\n                </Col>\n                <Col span={4}>\n                  <Input\n                    value={loginPassword}\n                    onChange={(e) => this.changeInput(e, 'loginPassword')}\n                  />\n                </Col>\n              </Row>\n              <Row style={{ marginTop: 10 }}>\n                <Col span={1} style={{ textAlign: 'right' }}></Col>\n                <Col span={22} style={{ textAlign: 'left' }}>\n                  <Checkbox\n                    checked={viewListEvent}\n                    onChange={(e) => this.changeCheckbox(e, 'viewListEvent')}\n                  >\n                    listen event 보기\n                  </Checkbox>\n                  <Checkbox\n                    checked={viewWebSocketRequestInfo}\n                    onChange={(e) =>\n                      this.changeCheckbox(e, 'viewWebSocketRequestInfo')\n                    }\n                  >\n                    protocol request 보기\n                  </Checkbox>\n                  <Checkbox\n                    checked={viewSdtSocketList}\n                    onChange={(e) =>\n                      this.changeCheckbox(e, 'viewSdtSocketList')\n                    }\n                  >\n                    상담톡 요청 request 보기\n                  </Checkbox>\n                </Col>\n              </Row>\n            </div>\n            {/* listen event 정보 */}\n            <div style={{ display: viewListEvent ? '' : 'none' }}>\n              <Divider orientation=\"left\" style={{ fontWeight: 'bold' }}>\n                listen event 정보\n              </Divider>\n              <Row align=\"middle\" gutter={6}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  event\n                </Col>\n                <Col span={15}>\n                  <Tooltip\n                    placement=\"bottomLeft\"\n                    title={', 구분자로 이벤트 등록\\n예시) join,message,payload'}\n                    overlayStyle={{ whiteSpace: 'pre' }}\n                  >\n                    <Input\n                      value={listenEventNameListString}\n                      onChange={(e) =>\n                        this.changeInput(e, 'listenEventNameListString')\n                      }\n                    />\n                  </Tooltip>\n                </Col>\n                <Col span={4}>\n                  <Button\n                    type=\"primary\"\n                    onClick={this.addCustomEvent}\n                    disabled={!isConnected}\n                  >\n                    이벤트 등록\n                  </Button>\n                </Col>\n              </Row>\n              <Row\n                align=\"middle\"\n                gutter={6}\n                style={{ marginTop: 10, marginLeft: 10 }}\n              >\n                <Col\n                  span={6}\n                  align=\"\"\n                  style={{ textAlign: 'left', marginLeft: 5 }}\n                >\n                  현재 응답명 :{' '}\n                  <sapn style={{ fontWeight: 'bold', fontSize: '18px' }}>\n                    {'\"' + currentEventName + '\"'}\n                  </sapn>\n                </Col>\n              </Row>\n              <Row\n                style={{\n                  marginLeft: 20,\n                  paddingTop: 10,\n                  display: currentEventResponse ? '' : 'none'\n                }}\n              >\n                <Col span={24}>\n                  <ReactJson\n                    name={false}\n                    displayDataTypes={false}\n                    collapsed={false}\n                    src={currentEventResponse}\n                    indentWidth={10}\n                    theme=\"monokai\"\n                    style={{ width: '80%' }}\n                  />\n                </Col>\n              </Row>\n            </div>\n            {/* protocol reqeust 정보 */}\n            <div style={{ display: viewWebSocketRequestInfo ? '' : 'none' }}>\n              <Divider orientation=\"left\" style={{ fontWeight: 'bold' }}>\n                소켓 emit(공통)\n              </Divider>\n              <Row align=\"middle\" gutter={6}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  소켓 프로토콜\n                </Col>\n                <Col span={10}>\n                  <Input\n                    value={requestWebSocketProtocol}\n                    onChange={(e) =>\n                      this.changeInput(e, 'requestWebSocketProtocol')\n                    }\n                  />{' '}\n                </Col>\n                <Col span={10}>\n                  <Button\n                    type=\"primary\"\n                    disabled={!isConnected || !validRequestParamter}\n                    onClick={this.requestWebSocket}\n                  >\n                    요청\n                  </Button>{' '}\n                  <Checkbox\n                    checked={requestWebSocketCallbackEnable}\n                    onChange={(e) =>\n                      this.changeCheckbox(e, 'requestWebSocketCallbackEnable')\n                    }\n                  >\n                    callback 함수\n                  </Checkbox>\n                </Col>\n              </Row>\n              <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  요청 파라미터\n                </Col>\n              </Row>\n              <Row style={{ marginLeft: 15, paddingTop: 5 }}>\n                <JSONInput\n                  placeholder={requestWebSocketParamter} // data to display\n                  theme=\"light_mitsuketa_tribute\"\n                  locale={locale}\n                  colors={{\n                    string: '#DAA520',\n                    background: '#dbfbff'\n                  }}\n                  width=\"500px\"\n                  height=\"auto\"\n                  style={{\n                    body: { minHeight: 50 },\n                    container: { width: '100%' },\n                    outerBox: { width: '80%' }\n                  }}\n                  onChange={(content) => {\n                    let isError = content.error;\n                    let updateJson = content.jsObject;\n                    this.setState({\n                      validRequestParamter: !isError,\n                      requestWebSocketParamter: updateJson\n                    });\n                  }}\n                />\n              </Row>\n              <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  callback 응답\n                </Col>\n              </Row>\n              <Row\n                style={{\n                  marginLeft: 20,\n                  paddingTop: 10,\n                  display: requestCallbackResponse ? '' : 'none'\n                }}\n              >\n                <Col span={24}>\n                  <ReactJson\n                    name={false}\n                    displayDataTypes={false}\n                    collapsed={false}\n                    src={requestCallbackResponse}\n                    indentWidth={10}\n                    theme=\"monokai\"\n                    style={{ width: '80%' }}\n                  />\n                </Col>\n              </Row>\n            </div>\n            {/* 상담톡 웹소켓 요청 목록 */}\n            <div\n              style={{\n                marginBottom: 100,\n                display: viewSdtSocketList ? '' : 'none'\n              }}\n            >\n              <Divider orientation=\"left\" style={{ fontWeight: 'bold' }}>\n                상담톡 웹소켓 요청 목록\n              </Divider>\n              <Collapse>\n                {webSocektRequestList.map((requestInfo, index) => {\n                  return (\n                    <Panel header={requestInfo.name} key={index}>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          요청명 :\n                          <sapn style={{ fontWeight: 'bold' }}>\n                            \"{requestInfo.name}\"\n                          </sapn>\n                          {', callback 응답 여부'}\n                          <Checkbox\n                            checked={requestInfo.isCallbackFunction}\n                            style={{ marginLeft: 5 }}\n                          ></Checkbox>{' '}\n                          <Button\n                            type=\"primary\"\n                            size=\"small\"\n                            disabled={!isConnected}\n                            onClick={() =>\n                              this.requestSdtWebsocket(index, requestInfo)\n                            }\n                          >\n                            요청\n                          </Button>{' '}\n                        </Col>\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={5} align=\"\" style={{ textAlign: 'left' }}>\n                          요청 파라미터\n                        </Col>\n                      </Row>\n                      <Row style={{ paddingTop: 5 }}>\n                        <ReactJson\n                          name={false}\n                          displayDataTypes={false}\n                          onEdit={(info) => {\n                            this.changeWebSocektRequestListToParameter(\n                              index,\n                              info.updated_src\n                            );\n                          }}\n                          collapsed={false}\n                          src={requestInfo.parameter}\n                          indentWidth={10}\n                          theme=\"monokai\"\n                          style={{ width: '80%' }}\n                        />\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={5} align=\"\" style={{ textAlign: 'left' }}>\n                          callback 응답\n                        </Col>\n                      </Row>\n                      <Row\n                        style={{\n                          paddingTop: 10,\n                          display: requestInfo.callbackFunctionResponse\n                            ? ''\n                            : 'none'\n                        }}\n                      >\n                        <Col span={24}>\n                          <ReactJson\n                            name={false}\n                            displayDataTypes={false}\n                            collapsed={false}\n                            src={requestInfo.callbackFunctionResponse}\n                            indentWidth={10}\n                            theme=\"monokai\"\n                            style={{ width: '80%' }}\n                          />\n                        </Col>\n                      </Row>\n                    </Panel>\n                  );\n                })}\n              </Collapse>\n            </div>\n          </div>\n        </Spin>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.info(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.info(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.info(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}