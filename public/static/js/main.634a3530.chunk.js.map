{"version":3,"sources":["Config.js","Constant.js","Code.js","App.js","serviceWorker.js","index.js"],"names":["Config","env","url","loginApiUrl","loginId","loginPassword","name","protocol","parameter","empid","space","speaker","isCallbackFunction","callbackFunctionResponse","isCustomerConnect","cmd","msg","mtype","sysmsg","onlyadm","isemp","msgname","startid","lastid","data","m","t","Constant","Code","dbBooleanValueCodeList","value","DB_TRUE_VALUE","DB_FALSE_VALUE","messageTypeCodeList","getCodeNameByValue","codeCategory","codeValue","codeName","codeList","searchIndex","_","findIndex","codeInfo","Option","Select","Panel","Collapse","App","props","socket","webSocektRequestList","filter","info","state","loginToken","loginUser","socketUrl","defaultSocketUrl","isConnected","isUrlModalOpen","isLoginUserModalOpen","defaultLoginApiUrl","defaultLoginId","defaultLoginPassword","userno","listenEventNameListString","currentEventName","currentEventResponse","viewSendMessage","viewListEvent","viewWebSocketRequestInfo","viewSdtSocketList","requestWebSocketProtocol","requestWebSocketCallbackEnable","requestWebSocketParamter","validRequestParamter","requestCallbackResponse","isLoading","spaceId","defaultSendMessageValue","messageText","messageType","isSysMessage","isOnlyAdmin","isEmp","linkMessage","changeInput","bind","changeCheckbox","showModal","closeModal","showLoginUserModal","closeLoginUserModal","changeUrlInfo","connect","disconnect","connectSocket","initDefaultSocektEvent","onConnect","onDisconnect","resetData","copyClipboardByLoginInfo","addCustomEvent","requestWebSocket","requestSdtWebsocket","changeWebSocektRequestListToParameter","changeWebSocektRequestListToResponse","sendMessage","message","lineNumber","column","errorObject","displayErrorMessage","appErrorObject","stack","statck","console","JSON","stringify","process","window","onerror","this","handleGlobalError","event","inputName","setState","target","checked","urlInfo","copyString","id","copy","alert","usesrno","axios","post","username","password","then","response","token","user","catch","error","io","on","onMessage","onEvent","MESSAGE_TYPE_NORMAL","emit","eventList","split","forEach","eventName","off","skipEvent","customEventResult","callbackFunction","err","res","arrayIndex","requestInfo","onlyValue","rootString","newParameter","cloneDeep","updateParameter","updateWebSocektRequestList","update","$set","updateResponse","socketParameter","log","init","socketUrlList","tip","spinning","title","visible","footer","onCancel","map","index","header","key","align","gutter","style","marginTop","span","fontWeight","type","onClick","orientation","textAlign","onChange","e","danger","display","color","marginBottom","disabled","MESSAGE_TYPE_APP_LINK","marginLeft","defaultValue","width","placement","overlayStyle","whiteSpace","fontSize","paddingTop","displayDataTypes","collapsed","src","indentWidth","theme","placeholder","locale","colors","string","background","height","body","minHeight","container","outerBox","content","isError","updateJson","jsObject","size","onEdit","updated_src","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.634a3530.chunk.js","sourcesContent":["const Config = {};\n\n// url 목록(로컬, 개발, 운영)\nConfig.socketUrlList = [\n  {\n    env: '로컬',\n    url:\n      'http://localhost:9090?prj=sdtalk&appid=sdtadm&cid=1&token=1aec31172508a8',\n    loginApiUrl: 'http://localhost:9090/auth/sdtalk/sdtadm/1/emp/login',\n    loginId: 'csmaster1',\n    loginPassword: '1212'\n  },\n  {\n    env: '개발',\n    url:\n      'http://localhost:9091?prj=sdtalk&appid=sdtadm&cid=1&token=1aec31172508a8',\n    loginApiUrl: 'http://localhost:9091/auth/sdtalk/sdtadm/1/emp/login',\n    loginId: 'csmaster1',\n    loginPassword: '1212'\n  },\n  {\n    env: '운영',\n    url:\n      'http://localhost:9092?prj=sdtalk&appid=sdtadm&cid=1&token=1aec31172508a8',\n    loginApiUrl: 'http://localhost:9092/auth/sdtalk/sdtadm/1/emp/login',\n    loginId: 'csmaster1',\n    loginPassword: '1212'\n  }\n];\n\n// 기본 url(로컬)\nConfig.defaultSocketUrl =\n  'http://localhost:9090?prj=sdtalk&appid=sdtadm&cid=1&token=1aec31172508a8';\n\n// 기본 로그인 api url(로컬)\nConfig.defaultLoginApiUrl =\n  'http://localhost:9090/auth/sdtalk/sdtadm/1/emp/login';\n\n// 로그인 id 기본값\nConfig.defaultLoginId = 'csmaster1';\n\n// 로그인 password 기본값\nConfig.defaultLoginPassword = '1212';\n\n// 기본 listen event\nConfig.listenEventNameListString = 'payload,message,reads,err,welcome';\n\n// 상담톡 요청 목록 : 상담톡(join, payload, message, reads-emp, leave), 고객(join, message, prehistory, spaceinfo, speaks, reads, end)\n\nConfig.webSocektRequestList = [\n  {\n    name: '방 조인(상담사)',\n    protocol: 'join',\n    parameter: { empid: 1, space: '9', speaker: 177 },\n    isCallbackFunction: true,\n    callbackFunctionResponse: null,\n    isCustomerConnect: false\n  },\n  {\n    name: 'payload',\n    protocol: 'payload',\n    parameter: {\n      cmd: 'reload-spaces-by-admin',\n      space: 9\n    },\n    isCallbackFunction: false,\n    callbackFunctionResponse: null,\n    isCustomerConnect: false\n  },\n  {\n    name: '메시지 전송(상담사)',\n    protocol: 'message',\n    parameter: {\n      space: 9,\n      msg: 'scgmsc://hanbill/regist',\n      mtype: 4,\n      sysmsg: 0,\n      onlyadm: 0,\n      isemp: 1,\n      msgname: '요금상세'\n    },\n    isCallbackFunction: true,\n    callbackFunctionResponse: null,\n    isCustomerConnect: false\n  },\n\n  {\n    name: '메시지 읽음(상담사)',\n    protocol: 'reads-emp',\n    parameter: {\n      space: 9,\n      startid: 2483,\n      lastid: 2484,\n      speaker: 177\n    },\n    isCallbackFunction: false,\n    callbackFunctionResponse: null,\n    isCustomerConnect: false\n  },\n  {\n    name: '방나가기(상담사)',\n    protocol: 'leave',\n    parameter: { space: '9' },\n    isCallbackFunction: false,\n    callbackFunctionResponse: null,\n    isCustomerConnect: false\n  },\n  {\n    name: '방 조인(고객)',\n    protocol: 'join',\n    parameter: { space: '9' },\n    isCallbackFunction: true,\n    callbackFunctionResponse: null,\n    isCustomerConnect: true\n  },\n  {\n    name: '메시지 전송(고객)',\n    protocol: 'message',\n    parameter: {\n      space: 9,\n      msg: 'yap yap',\n      mtype: 0\n    },\n    isCallbackFunction: true,\n    callbackFunctionResponse: null,\n    isCustomerConnect: true\n  },\n  {\n    name: '이전 히스토리 저장(고객)',\n    protocol: 'prehistory',\n    parameter: {\n      space: '9',\n      data: [\n        { m: '...', t: '2018-06-26 05:23:05' },\n        { m: '[상담사와 채팅하기] 클릭 1', t: '2018-06-26 05:23:11' }\n      ]\n    },\n    isCallbackFunction: false,\n    callbackFunctionResponse: null,\n    isCustomerConnect: true\n  },\n  {\n    name: '방 정보 조회(고객)',\n    protocol: 'spaceinfo',\n    parameter: { speaker: 69 },\n    isCallbackFunction: true,\n    callbackFunctionResponse: null,\n    isCustomerConnect: true\n  },\n  {\n    name: '메시지 목록(고객)',\n    protocol: 'speaks',\n    parameter: { space: '9' },\n    isCallbackFunction: true,\n    callbackFunctionResponse: null,\n    isCustomerConnect: true\n  },\n  {\n    name: '메시지 읽음(고객)',\n    protocol: 'reads',\n    parameter: { space: 9, startid: 111, lastid: 333 },\n    isCallbackFunction: false,\n    callbackFunctionResponse: null,\n    isCustomerConnect: true\n  },\n  {\n    name: '방 나가기(고객)',\n    protocol: 'end',\n    parameter: { space: '9' },\n    isCallbackFunction: true,\n    callbackFunctionResponse: null,\n    isCustomerConnect: true\n  }\n];\n\nConfig.defaultSendMessageValue = {\n  space: 9,\n  msg: '기본 메시지',\n  mtype: 0,\n  sysmsg: 0,\n  onlyadm: 0,\n  isemp: 1,\n  msgname: ''\n};\n\nexport default Config;\n","const Constant = {};\n\n// db에 저장되는 booelan value\nConstant.DB_TRUE_VALUE = 1;\nConstant.DB_FALSE_VALUE = 0;\n\n// 메시지 유형 0: 일반, 1: img, 2: mv, 3: attach, 4: link\nConstant.MESSAGE_TYPE_NORMAL = 0;\nConstant.MESSAGE_TYPE_IMAGE = 1;\nConstant.MESSAGE_TYPE_VIDEO = 2;\nConstant.MESSAGE_TYPE_ATTACH = 3;\nConstant.MESSAGE_TYPE_APP_LINK = 4;\n\nexport default Constant;\n","import Constant from './Constant';\nimport _ from 'lodash';\n\nconst Code = {};\n\n// O, X\nCode.dbBooleanValueCodeList = [\n  { name: 'O', value: Constant.DB_TRUE_VALUE },\n  { name: 'X', value: Constant.DB_FALSE_VALUE }\n];\n\n// 메시지 유형 0: 일반, 1: img, 2: mv, 3: attach, 4: link\nCode.messageTypeCodeList = [\n  { name: '일반', value: 0 },\n  { name: '이미지', value: 1 },\n  { name: '동영상', value: 2 },\n  { name: '첨부', value: 3 },\n  { name: '가스앱링크', value: 4 }\n];\n\nCode.getCodeNameByValue = function (codeCategory, codeValue) {\n  let codeName = null;\n  let codeList = Code[codeCategory] || [];\n  let searchIndex = _.findIndex(codeList, (codeInfo) => {\n    if (codeValue === codeInfo.value) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  if (searchIndex !== -1) {\n    let findCodeInfo = codeList[searchIndex];\n    codeName = findCodeInfo.name;\n  }\n  return codeName;\n};\n\nexport default Code;\n","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport './App.css';\nimport {\n  Button,\n  Row,\n  Col,\n  Input,\n  Tag,\n  Divider,\n  Checkbox,\n  Modal,\n  Tooltip,\n  Collapse,\n  Spin,\n  Select\n} from 'antd';\nimport ReactJson from 'react-json-view';\nimport Config from './Config';\nimport Constant from './Constant';\nimport Code from './Code';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport copy from 'copy-to-clipboard';\nimport update from 'immutability-helper';\nimport _ from 'lodash';\nconst { Option } = Select;\n\nconst { Panel } = Collapse;\n\nclass App extends Component {\n  socket = null;\n\n  constructor(props) {\n    super(props);\n\n    /*\n      \n      연결 url : socketUrl\n      현재 상태 : isConnected\n      login api url : loginApiUrl\n      id / password : loginId, loginPassword\n      가스앱회원 id : userno\n      가스앱회원으로 socket 연결 여부 : isCustomerConnect\n      listen 이벤트 정보 : listenEventNameListString\n      현재 응답명 : currentEventName\n      현재 응답 정보 : currentEventResponse\n      메시지 전송 영역 view : viewSendMessage\n      list event 정보 영역 view : viewListEvent\n      protocol request 영역 view : viewWebSocketRequestInfo\n      상담톡 웹소켓 요청 목록 view : viewSdtSocketList\n      요청 protocol : requestWebSocketProtocol,\n      요청 callback 반영 여부 : requestWebSocketCallbackEnable\n      요청 파라미터 : requestWebSocketParamter,\n      요청 파리미터 valid 여부 : validRequestParamter\n      요청 callback 응답 : requestCallbackResponse\n      상담톡 요청 소켓 목록 : webSocektRequestList\n      로딩중 : isLoading\n\n      메시지 전송 space id : spaceId,\n      전송 메시지: messageText,\n      전송 메시지 타입: messageType,\n      시스템 메시지 여부: isSysMessage,\n      관리자 여부: isOnlyAdmin,\n      직원 여부: isEmp,\n      링크 메시지: linkMessage\n\n    */\n\n    let webSocektRequestList = _.filter(Config.webSocektRequestList, (info) => {\n      return !info.isCustomerConnect;\n    });\n\n    this.state = {\n      socket: null,\n      loginToken: '',\n      loginUser: null,\n      socketUrl: Config.defaultSocketUrl,\n      isConnected: false,\n      isUrlModalOpen: false,\n      isLoginUserModalOpen: false,\n      loginApiUrl: Config.defaultLoginApiUrl,\n      loginId: Config.defaultLoginId,\n      loginPassword: Config.defaultLoginPassword,\n      userno: '',\n      isCustomerConnect: false,\n      listenEventNameListString: Config.listenEventNameListString,\n      currentEventName: '',\n      currentEventResponse: null,\n      viewSendMessage: true,\n      viewListEvent: true,\n      viewWebSocketRequestInfo: true,\n      viewSdtSocketList: true,\n      requestWebSocketProtocol: '',\n      requestWebSocketCallbackEnable: true,\n      requestWebSocketParamter: null,\n      validRequestParamter: true,\n      requestCallbackResponse: null,\n      webSocektRequestList: webSocektRequestList,\n      isLoading: false,\n      spaceId: Config.defaultSendMessageValue.space,\n      messageText: Config.defaultSendMessageValue.msg,\n      messageType: Config.defaultSendMessageValue.mtype,\n      isSysMessage: Config.defaultSendMessageValue.sysmsg ? true : false,\n      isOnlyAdmin: Config.defaultSendMessageValue.onlyadm ? true : false,\n      isEmp: Config.defaultSendMessageValue.isemp ? true : false,\n      linkMessage: Config.defaultSendMessageValue.msgname\n    };\n\n    // 공통 input 변경\n    this.changeInput = this.changeInput.bind(this);\n\n    // 공통 체크 박스 변경\n    this.changeCheckbox = this.changeCheckbox.bind(this);\n\n    // 모달 open\n    this.showModal = this.showModal.bind(this);\n\n    // 모달 close\n    this.closeModal = this.closeModal.bind(this);\n\n    // 로그인 사용자 정보 모달 open\n    this.showLoginUserModal = this.showLoginUserModal.bind(this);\n\n    // 로그인 사용자 정보 모달 close\n    this.closeLoginUserModal = this.closeLoginUserModal.bind(this);\n\n    // socket url, id, password 변경\n    this.changeUrlInfo = this.changeUrlInfo.bind(this);\n\n    // [연결] 버튼 핸들러\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n\n    // socket connect\n    this.connectSocket = this.connectSocket.bind(this);\n\n    // socket 기본 이밴트 등록\n    this.initDefaultSocektEvent = this.initDefaultSocektEvent.bind(this);\n\n    // socket 기본 event\n    this.onConnect = this.onConnect.bind(this);\n    this.onDisconnect = this.onDisconnect.bind(this);\n\n    // state data reset\n    this.resetData = this.resetData.bind(this);\n\n    // 로그인 정보 클립보드 copy\n    this.copyClipboardByLoginInfo = this.copyClipboardByLoginInfo.bind(this);\n\n    // 커스텀 이벤트 등록\n    this.addCustomEvent = this.addCustomEvent.bind(this);\n\n    // 웹소켓 요청\n    this.requestWebSocket = this.requestWebSocket.bind(this);\n\n    // 웹소켓 요청(상담톡 개별)\n    this.requestSdtWebsocket = this.requestSdtWebsocket.bind(this);\n\n    // 상담톡 요청 파리미터 수정\n    this.changeWebSocektRequestListToParameter = this.changeWebSocektRequestListToParameter.bind(\n      this\n    );\n\n    // 상담톡 응답 수정\n    this.changeWebSocektRequestListToResponse = this.changeWebSocektRequestListToResponse.bind(\n      this\n    );\n\n    // 메시지 전송\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  handleGlobalError(message, url, lineNumber, column, errorObject) {\n    if (errorObject && typeof errorObject === 'string') {\n      errorObject = {\n        message: errorObject\n      };\n    }\n    let displayErrorMessage = '';\n    displayErrorMessage = displayErrorMessage + 'url : ' + url + '\\n';\n    displayErrorMessage =\n      displayErrorMessage + 'lineNumber : ' + lineNumber + '\\n';\n    displayErrorMessage = displayErrorMessage + 'column : ' + column + '\\n';\n    displayErrorMessage =\n      displayErrorMessage +\n      'message : ' +\n      (errorObject && errorObject.message\n        ? errorObject.message\n        : 'NO MESSAGE') +\n      '\\n';\n    errorObject = errorObject || {};\n    errorObject.message = displayErrorMessage;\n    let appErrorObject = { message: errorObject.message };\n    if (errorObject.stack) {\n      appErrorObject.statck = errorObject.stack;\n    }\n    console.info('appErrorInfo : ' + JSON.stringify(appErrorObject));\n    return false;\n  }\n\n  init() {\n    console.info('process.env : ' + JSON.stringify(process.env));\n    window.onerror = this.handleGlobalError;\n  }\n\n  changeInput(event, inputName) {\n    this.setState({ [inputName]: event.target.value });\n  }\n\n  changeCheckbox(event, inputName) {\n    let checked = event.target.checked;\n    this.setState({ [inputName]: checked });\n  }\n\n  showModal() {\n    this.setState({ isUrlModalOpen: true });\n  }\n\n  closeModal() {\n    this.setState({ isUrlModalOpen: false });\n  }\n\n  showLoginUserModal() {\n    this.setState({ isLoginUserModalOpen: true });\n  }\n\n  closeLoginUserModal() {\n    this.setState({ isLoginUserModalOpen: false });\n  }\n\n  changeUrlInfo(urlInfo) {\n    this.setState({\n      socketUrl: urlInfo.url,\n      loginApiUrl: urlInfo.loginApiUrl,\n      loginId: urlInfo.loginId,\n      loginPassword: urlInfo.loginPassword,\n      isUrlModalOpen: false\n    });\n  }\n\n  resetData() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    this.socket = null;\n    this.setState({\n      loginToken: '',\n      loginUser: null,\n      socket: null,\n      isConnected: false,\n      isUrlModalOpen: false,\n      currentEventName: '',\n      currentEventResponse: null,\n      viewSendMessage: true,\n      viewListEvent: true,\n      viewWebSocketRequestInfo: true,\n      viewSdtSocketList: true,\n      requestCallbackResponse: null,\n      webSocektRequestList: Config.webSocektRequestList\n    });\n  }\n\n  copyClipboardByLoginInfo() {\n    let { socket, loginUser, loginToken } = this.state;\n    // 소켓 id :\n    // 로그인 토큰 :\n    // 사용자 정보(JSON) :\n    let copyString =\n      '소켓 id : ' +\n      (socket ? socket.id : '') +\n      '\\n' +\n      '로그인 토큰 : ' +\n      loginToken +\n      '\\n' +\n      '사용자 정보(JSON) : ' +\n      JSON.stringify(loginUser);\n    copy(copyString);\n    alert('클립보드에 복사되었습니다');\n    this.closeLoginUserModal();\n  }\n\n  connect() {\n    this.resetData();\n    let { loginApiUrl, loginId, loginPassword, usesrno } = this.state;\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    if (!usesrno) {\n      this.setState({ isLoading: true });\n      axios\n        .post(loginApiUrl, {\n          username: loginId,\n          password: loginPassword\n        })\n        .then((response) => {\n          let data = response.data;\n          let token = data.token;\n          let user = data.user;\n          this.setState({\n            loginUser: user,\n            loginToken: token,\n            isLoading: false\n          });\n          this.connectSocket();\n        })\n        .catch((error) => {\n          this.setState({ isLoading: false });\n        });\n    } else {\n      this.connectSocket();\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.resetData();\n    }\n  }\n\n  connectSocket() {\n    let { socketUrl, userno } = this.state;\n    if (userno) {\n      socketUrl = socketUrl + '&userno=' + userno;\n    }\n    this.socket = io(socketUrl);\n    this.initDefaultSocektEvent();\n  }\n\n  initDefaultSocektEvent() {\n    // conenct, disconnect, message, event\n    this.socket.on('connect', this.onConnect);\n    this.socket.on('disconnect', this.onDisconnect);\n    this.socket.on('message', this.onMessage);\n    this.socket.on('event', this.onEvent);\n    this.addCustomEvent();\n  }\n\n  onConnect() {\n    let { loginToken, userno } = this.state;\n    let socket = this.socket;\n    this.setState({ socket: socket, isConnected: true });\n    let webSocektRequestList = [];\n    if (!userno) {\n      webSocektRequestList = _.filter(Config.webSocektRequestList, (info) => {\n        return !info.isCustomerConnect;\n      });\n      this.setState({\n        isCustomerConnect: false,\n        webSocektRequestList: webSocektRequestList\n      });\n      this.socket.emit('login', {\n        token: loginToken\n      });\n    } else {\n      webSocektRequestList = _.filter(Config.webSocektRequestList, (info) => {\n        return info.isCustomerConnect;\n      });\n      this.setState({\n        isCustomerConnect: true,\n        messageType: Constant.MESSAGE_TYPE_NORMAL,\n        webSocektRequestList: webSocektRequestList\n      });\n    }\n  }\n\n  onDisconnect(event) {\n    this.socket = null;\n    this.resetData();\n  }\n\n  addCustomEvent() {\n    let { listenEventNameListString, userno } = this.state;\n    let eventList = listenEventNameListString.split(',');\n    let socket = this.socket;\n    // listenEventNameListString = 'payload,message,reads,err,welcome';\n    eventList.forEach((eventName) => {\n      socket.off(eventName);\n      let skipEvent = false;\n      if (userno) {\n        if (eventName === 'payload') {\n          skipEvent = true;\n        }\n      } else {\n        if (eventName === 'welcome') {\n          skipEvent = true;\n        }\n      }\n      if (!skipEvent) {\n        socket.on(eventName, (customEventResult) => {\n          this.setState({\n            currentEventName: eventName,\n            currentEventResponse: customEventResult\n          });\n        });\n      }\n    });\n    alert('커스텀 이벤트가 등록되었습니다');\n  }\n\n  requestWebSocket() {\n    let {\n      requestWebSocketProtocol,\n      requestWebSocketParamter,\n      requestWebSocketCallbackEnable\n    } = this.state;\n    let callbackFunction = null;\n    if (requestWebSocketCallbackEnable) {\n      callbackFunction = (err, res) => {\n        this.setState({ requestCallbackResponse: res });\n      };\n    }\n    this.socket.emit(\n      requestWebSocketProtocol,\n      requestWebSocketParamter,\n      callbackFunction\n    );\n  }\n\n  requestSdtWebsocket(arrayIndex, requestInfo) {\n    let { protocol, parameter, onlyValue, isCallbackFunction } = requestInfo;\n    let callbackFunction = null;\n    if (isCallbackFunction) {\n      callbackFunction = (err, res) => {\n        if (typeof res === 'string') {\n          res = { rootString: res };\n        }\n        this.changeWebSocektRequestListToResponse(arrayIndex, res);\n      };\n    }\n    let newParameter = _.cloneDeep(parameter);\n    if (onlyValue) {\n      this.socket.emit(protocol, newParameter.value, callbackFunction);\n    } else {\n      this.socket.emit(protocol, newParameter, callbackFunction);\n    }\n  }\n\n  changeWebSocektRequestListToParameter(arrayIndex, updateParameter) {\n    let { webSocektRequestList } = this.state;\n    let updateWebSocektRequestList = update(webSocektRequestList, {\n      [arrayIndex]: {\n        parameter: { $set: updateParameter }\n      }\n    });\n    this.setState({ webSocektRequestList: updateWebSocektRequestList });\n  }\n\n  changeWebSocektRequestListToResponse(arrayIndex, updateResponse) {\n    let { webSocektRequestList } = this.state;\n    let updateWebSocektRequestList = update(webSocektRequestList, {\n      [arrayIndex]: {\n        callbackFunctionResponse: { $set: updateResponse }\n      }\n    });\n    this.setState({ webSocektRequestList: updateWebSocektRequestList });\n  }\n\n  sendMessage() {\n    let {\n      spaceId,\n      messageText,\n      messageType,\n      isSysMessage,\n      isOnlyAdmin,\n      isEmp,\n      linkMessage\n    } = this.state;\n    let socketParameter = {\n      space: spaceId,\n      msg: messageText,\n      mtype: messageType,\n      msgname: linkMessage,\n      sysmsg: isSysMessage ? 1 : 0,\n      onlyadm: isOnlyAdmin ? 1 : 0,\n      isemp: isEmp ? 1 : 0\n    };\n    this.socket.emit('message', socketParameter, (response) => {\n      console.log('response :' + response);\n    });\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    let {\n      socket,\n      loginUser,\n      loginToken,\n      socketUrl,\n      isConnected,\n      isUrlModalOpen,\n      isLoginUserModalOpen,\n      loginApiUrl,\n      loginId,\n      loginPassword,\n      userno,\n      listenEventNameListString,\n      currentEventName,\n      currentEventResponse,\n      viewSendMessage,\n      viewListEvent,\n      viewWebSocketRequestInfo,\n      viewSdtSocketList,\n      requestWebSocketProtocol,\n      requestWebSocketCallbackEnable,\n      requestWebSocketParamter,\n      validRequestParamter,\n      requestCallbackResponse,\n      webSocektRequestList,\n      isLoading,\n      spaceId,\n      messageText,\n      messageType,\n      isSysMessage,\n      isOnlyAdmin,\n      isEmp,\n      linkMessage,\n      isCustomerConnect\n    } = this.state;\n    let socketUrlList = Config.socketUrlList;\n    let messageTypeCodeList = Code.messageTypeCodeList;\n    isSysMessage = isCustomerConnect ? false : isSysMessage;\n    isOnlyAdmin = isOnlyAdmin ? false : isOnlyAdmin;\n    isEmp = isEmp ? false : isEmp;\n\n    return (\n      <div>\n        <Spin tip=\"Loading...\" spinning={isLoading}>\n          <div>\n            {/* 연결 url 모달/ */}\n            <Modal\n              title=\"소켓 URL 및 계정선택\"\n              visible={isUrlModalOpen}\n              footer={null}\n              onCancel={() => this.closeModal()}\n            >\n              <Collapse>\n                {socketUrlList.map((urlInfo, index) => {\n                  return (\n                    <Panel header={urlInfo.env} key={index}>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          <span style={{ fontWeight: 'bold' }}>\"url\"</span> :{' '}\n                          {urlInfo.url}\n                        </Col>\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          <span style={{ fontWeight: 'bold' }}>\n                            \"로그인 api url\"\n                          </span>{' '}\n                          : {urlInfo.loginApiUrl}\n                        </Col>\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          <span style={{ fontWeight: 'bold' }}>\"id\"</span> :{' '}\n                          {urlInfo.loginId},{' '}\n                          <span style={{ fontWeight: 'bold' }}>\"password\"</span>{' '}\n                          : {urlInfo.loginPassword}\n                        </Col>\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          <Button\n                            type=\"primary\"\n                            onClick={() => this.changeUrlInfo(urlInfo)}\n                          >\n                            적용\n                          </Button>{' '}\n                        </Col>\n                      </Row>\n                    </Panel>\n                  );\n                })}\n              </Collapse>\n            </Modal>\n            {/* 로그인 사용자 정보 모달/ */}\n            <Modal\n              title=\"로그인 정보\"\n              visible={isLoginUserModalOpen}\n              footer={null}\n              onCancel={() => this.closeLoginUserModal()}\n            >\n              <p>\n                <span style={{ fontWeight: 'bold' }}>\"소켓 id\"</span> :{' '}\n                {socket ? socket.id : ''}\n              </p>\n              <p>\n                <span style={{ fontWeight: 'bold' }}>\"token\"</span> :{' '}\n                {loginToken}\n              </p>\n              <p>\n                <span style={{ fontWeight: 'bold' }}>\"사용자 정보 JSON\"</span>\n              </p>\n              <p>{JSON.stringify(loginUser)}</p>\n              <Button type=\"primary\" onClick={this.copyClipboardByLoginInfo}>\n                정보 복사\n              </Button>\n            </Modal>\n            {/* 연결정보 */}\n            <div>\n              <Divider\n                orientation=\"left\"\n                style={{\n                  fontWeight: 'bold'\n                }}\n              >\n                연결정보\n              </Divider>\n              <Row align=\"middle\" gutter={6}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  소켓 url\n                </Col>\n                <Col span={10}>\n                  <Input\n                    value={socketUrl}\n                    onChange={(e) => this.changeInput(e, 'socketUrl')}\n                  />\n                </Col>\n                <Col span={10}>\n                  {isConnected ? (\n                    <Button\n                      type=\"primary\"\n                      onClick={() => this.disconnect()}\n                      danger\n                    >\n                      연결끊기\n                    </Button>\n                  ) : (\n                    <Button type=\"primary\" onClick={() => this.connect()}>\n                      연결\n                    </Button>\n                  )}{' '}\n                  <Button type=\"primary\" onClick={() => this.showModal()}>\n                    URL 선택\n                  </Button>{' '}\n                  <Button\n                    type=\"primary\"\n                    onClick={() => this.showLoginUserModal()}\n                    style={{ display: loginUser ? '' : 'none' }}\n                  >\n                    사용자 정보\n                  </Button>{' '}\n                  {isConnected ? (\n                    <Tag color=\"#2db7f5\">현재 상태 connected</Tag>\n                  ) : (\n                    <Tag color=\"#f50\">현재 상태 disconnected</Tag>\n                  )}\n                </Col>\n              </Row>\n              <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  로그인 api url\n                </Col>\n                <Col span={10}>\n                  <Input\n                    value={loginApiUrl}\n                    onChange={(e) => this.changeInput(e, 'loginApiUrl')}\n                  />\n                </Col>\n              </Row>\n              <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                <Col span={2} style={{ textAlign: 'right' }}>\n                  로그인 ID\n                </Col>\n                <Col span={4}>\n                  <Input\n                    value={loginId}\n                    onChange={(e) => this.changeInput(e, 'loginId')}\n                  />\n                </Col>\n                <Col span={2} style={{ textAlign: 'right' }}>\n                  암호\n                </Col>\n                <Col span={4}>\n                  <Input\n                    value={loginPassword}\n                    onChange={(e) => this.changeInput(e, 'loginPassword')}\n                  />\n                </Col>\n                <Col span={2} style={{ textAlign: 'right' }}>\n                  가스앱 회원 id\n                </Col>\n                <Col span={4}>\n                  <Input\n                    value={userno}\n                    onChange={(e) => this.changeInput(e, 'userno')}\n                  />\n                </Col>\n              </Row>\n              <Row style={{ marginTop: 10 }}>\n                <Col span={1} style={{ textAlign: 'right' }}></Col>\n                <Col span={22} style={{ textAlign: 'left' }}>\n                  <Checkbox\n                    checked={viewSendMessage}\n                    onChange={(e) => this.changeCheckbox(e, 'viewSendMessage')}\n                  >\n                    메시지 전송 보기\n                  </Checkbox>\n                  <Checkbox\n                    checked={viewListEvent}\n                    onChange={(e) => this.changeCheckbox(e, 'viewListEvent')}\n                  >\n                    listen event 보기\n                  </Checkbox>\n                  <Checkbox\n                    checked={viewWebSocketRequestInfo}\n                    onChange={(e) =>\n                      this.changeCheckbox(e, 'viewWebSocketRequestInfo')\n                    }\n                  >\n                    protocol request 보기\n                  </Checkbox>\n                  <Checkbox\n                    checked={viewSdtSocketList}\n                    onChange={(e) =>\n                      this.changeCheckbox(e, 'viewSdtSocketList')\n                    }\n                  >\n                    상담톡 요청 request 보기\n                  </Checkbox>\n                </Col>\n              </Row>\n            </div>\n\n            {/* send message 영역 정보 */}\n            <div style={{ display: viewSendMessage ? '' : 'none' }}>\n              <Divider orientation=\"left\" style={{ fontWeight: 'bold' }}>\n                메시저 전송 정보\n              </Divider>\n\n              <Row\n                align=\"middle\"\n                gutter={6}\n                style={{ marginTop: 10, marginBottom: 10 }}\n              >\n                <Col span={2} style={{ textAlign: 'right' }}>\n                  space id\n                </Col>\n                <Col span={4}>\n                  <Input\n                    value={spaceId}\n                    onChange={(e) => this.changeInput(e, 'spaceId')}\n                  />\n                </Col>\n                <Col span={2} style={{ textAlign: 'right' }}>\n                  메시지\n                </Col>\n                <Col span={6}>\n                  <Input\n                    value={messageText}\n                    onChange={(e) => this.changeInput(e, 'messageText')}\n                  />\n                </Col>\n                <Col span={2} style={{ textAlign: 'right' }}>\n                  링크 메시지\n                </Col>\n                <Col span={4}>\n                  <Input\n                    value={linkMessage}\n                    onChange={(e) => this.changeInput(e, 'linkMessage')}\n                    disabled={\n                      isCustomerConnect ||\n                      messageType !== Constant.MESSAGE_TYPE_APP_LINK\n                    }\n                  />\n                </Col>\n              </Row>\n              <Row align=\"middle\" gutter={6}>\n                <Col span={1} style={{ textAlign: 'right' }}></Col>\n                <Col\n                  span={22}\n                  align=\"\"\n                  style={{ textAlign: 'left', marginLeft: 10 }}\n                >\n                  메시지 타입{' '}\n                  <Select\n                    defaultValue={Constant.MESSAGE_TYPE_NORMAL}\n                    value={messageType}\n                    style={{ width: 120 }}\n                    onChange={(value) => this.setState({ messageType: value })}\n                    disabled={isCustomerConnect}\n                  >\n                    {messageTypeCodeList.map((info) => (\n                      <Option value={info.value}>{info.name}</Option>\n                    ))}\n                  </Select>{' '}\n                  <Checkbox\n                    checked={isSysMessage}\n                    disabled={isCustomerConnect}\n                    onChange={(e) => this.changeCheckbox(e, 'isSysMessage')}\n                  >\n                    시스템 메시지\n                  </Checkbox>\n                  <Checkbox\n                    checked={isOnlyAdmin}\n                    disabled={isCustomerConnect}\n                    onChange={(e) => this.changeCheckbox(e, 'isOnlyAdmin')}\n                  >\n                    only관리자\n                  </Checkbox>\n                  <Checkbox\n                    checked={isEmp}\n                    disabled={isCustomerConnect}\n                    onChange={(e) => this.changeCheckbox(e, 'isEmp')}\n                  >\n                    직원여부\n                  </Checkbox>\n                  <Button\n                    type=\"primary\"\n                    onClick={this.sendMessage}\n                    disabled={!isConnected}\n                  >\n                    메시지 전송\n                  </Button>\n                </Col>\n              </Row>\n            </div>\n            {/* listen event 정보 */}\n            <div style={{ display: viewListEvent ? '' : 'none' }}>\n              <Divider orientation=\"left\" style={{ fontWeight: 'bold' }}>\n                listen event 정보\n              </Divider>\n              <Row align=\"middle\" gutter={6}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  event\n                </Col>\n                <Col span={15}>\n                  <Tooltip\n                    placement=\"bottomLeft\"\n                    title={', 구분자로 이벤트 등록\\n예시) join,message,payload'}\n                    overlayStyle={{ whiteSpace: 'pre' }}\n                  >\n                    <Input\n                      value={listenEventNameListString}\n                      onChange={(e) =>\n                        this.changeInput(e, 'listenEventNameListString')\n                      }\n                    />\n                  </Tooltip>\n                </Col>\n                <Col span={4}>\n                  <Button\n                    type=\"primary\"\n                    onClick={this.addCustomEvent}\n                    disabled={!isConnected}\n                  >\n                    이벤트 등록\n                  </Button>\n                </Col>\n              </Row>\n              <Row\n                align=\"middle\"\n                gutter={6}\n                style={{ marginTop: 10, marginLeft: 10 }}\n              >\n                <Col\n                  span={6}\n                  align=\"\"\n                  style={{ textAlign: 'left', marginLeft: 5 }}\n                >\n                  현재 응답명 :{' '}\n                  <sapn style={{ fontWeight: 'bold', fontSize: '18px' }}>\n                    {'\"' + currentEventName + '\"'}\n                  </sapn>\n                </Col>\n              </Row>\n              <Row\n                style={{\n                  marginLeft: 20,\n                  paddingTop: 10,\n                  display: currentEventResponse ? '' : 'none'\n                }}\n              >\n                <Col span={24}>\n                  <ReactJson\n                    name={false}\n                    displayDataTypes={false}\n                    collapsed={false}\n                    src={currentEventResponse}\n                    indentWidth={10}\n                    theme=\"monokai\"\n                    style={{ width: '80%' }}\n                  />\n                </Col>\n              </Row>\n            </div>\n            {/* protocol reqeust 정보 */}\n            <div style={{ display: viewWebSocketRequestInfo ? '' : 'none' }}>\n              <Divider orientation=\"left\" style={{ fontWeight: 'bold' }}>\n                소켓 emit(공통)\n              </Divider>\n              <Row align=\"middle\" gutter={6}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  소켓 프로토콜\n                </Col>\n                <Col span={10}>\n                  <Input\n                    value={requestWebSocketProtocol}\n                    onChange={(e) =>\n                      this.changeInput(e, 'requestWebSocketProtocol')\n                    }\n                  />{' '}\n                </Col>\n                <Col span={10}>\n                  <Button\n                    type=\"primary\"\n                    disabled={!isConnected || !validRequestParamter}\n                    onClick={this.requestWebSocket}\n                  >\n                    요청\n                  </Button>{' '}\n                  <Checkbox\n                    checked={requestWebSocketCallbackEnable}\n                    onChange={(e) =>\n                      this.changeCheckbox(e, 'requestWebSocketCallbackEnable')\n                    }\n                  >\n                    callback 함수\n                  </Checkbox>\n                </Col>\n              </Row>\n              <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  요청 파라미터\n                </Col>\n              </Row>\n              <Row style={{ marginLeft: 15, paddingTop: 5 }}>\n                <JSONInput\n                  placeholder={requestWebSocketParamter} // data to display\n                  theme=\"light_mitsuketa_tribute\"\n                  locale={locale}\n                  colors={{\n                    string: '#DAA520',\n                    background: '#dbfbff'\n                  }}\n                  width=\"500px\"\n                  height=\"auto\"\n                  style={{\n                    body: { minHeight: 50 },\n                    container: { width: '100%' },\n                    outerBox: { width: '80%' }\n                  }}\n                  onChange={(content) => {\n                    let isError = content.error;\n                    let updateJson = content.jsObject;\n                    this.setState({\n                      validRequestParamter: !isError,\n                      requestWebSocketParamter: updateJson\n                    });\n                  }}\n                />\n              </Row>\n              <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                <Col span={2} align=\"\" style={{ textAlign: 'right' }}>\n                  callback 응답\n                </Col>\n              </Row>\n              <Row\n                style={{\n                  marginLeft: 20,\n                  paddingTop: 10,\n                  display: requestCallbackResponse ? '' : 'none'\n                }}\n              >\n                <Col span={24}>\n                  <ReactJson\n                    name={false}\n                    displayDataTypes={false}\n                    collapsed={false}\n                    src={requestCallbackResponse}\n                    indentWidth={10}\n                    theme=\"monokai\"\n                    style={{ width: '80%' }}\n                  />\n                </Col>\n              </Row>\n            </div>\n            {/* 상담톡 웹소켓 요청 목록 */}\n            <div\n              style={{\n                marginBottom: 100,\n                display: viewSdtSocketList ? '' : 'none'\n              }}\n            >\n              <Divider orientation=\"left\" style={{ fontWeight: 'bold' }}>\n                상담톡 웹소켓 요청 목록\n              </Divider>\n              <Collapse>\n                {webSocektRequestList.map((requestInfo, index) => {\n                  return (\n                    <Panel header={requestInfo.name} key={index}>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={24}>\n                          요청명 :\n                          <sapn style={{ fontWeight: 'bold' }}>\n                            \"{requestInfo.name}\"\n                          </sapn>\n                          {', callback 응답 여부'}\n                          <Checkbox\n                            checked={requestInfo.isCallbackFunction}\n                            style={{ marginLeft: 5 }}\n                          ></Checkbox>{' '}\n                          <Button\n                            type=\"primary\"\n                            size=\"small\"\n                            disabled={!isConnected}\n                            onClick={() =>\n                              this.requestSdtWebsocket(index, requestInfo)\n                            }\n                          >\n                            요청\n                          </Button>{' '}\n                        </Col>\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={5} align=\"\" style={{ textAlign: 'left' }}>\n                          요청 파라미터\n                        </Col>\n                      </Row>\n                      <Row style={{ paddingTop: 5 }}>\n                        <ReactJson\n                          name={false}\n                          displayDataTypes={false}\n                          onEdit={(info) => {\n                            this.changeWebSocektRequestListToParameter(\n                              index,\n                              info.updated_src\n                            );\n                          }}\n                          collapsed={false}\n                          src={requestInfo.parameter}\n                          indentWidth={10}\n                          theme=\"monokai\"\n                          style={{ width: '80%' }}\n                        />\n                      </Row>\n                      <Row align=\"middle\" gutter={6} style={{ marginTop: 10 }}>\n                        <Col span={5} align=\"\" style={{ textAlign: 'left' }}>\n                          callback 응답\n                        </Col>\n                      </Row>\n                      <Row\n                        style={{\n                          paddingTop: 10,\n                          display: requestInfo.callbackFunctionResponse\n                            ? ''\n                            : 'none'\n                        }}\n                      >\n                        <Col span={24}>\n                          <ReactJson\n                            name={false}\n                            displayDataTypes={false}\n                            collapsed={false}\n                            src={requestInfo.callbackFunctionResponse}\n                            indentWidth={10}\n                            theme=\"monokai\"\n                            style={{ width: '80%' }}\n                          />\n                        </Col>\n                      </Row>\n                    </Panel>\n                  );\n                })}\n              </Collapse>\n            </div>\n          </div>\n        </Spin>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.info(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.info(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.info(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}